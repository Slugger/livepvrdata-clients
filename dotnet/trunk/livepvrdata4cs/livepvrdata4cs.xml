<?xml version="1.0"?>
<doc>
    <assembly>
        <name>livepvrdata4cs</name>
    </assembly>
    <members>
        <member name="T:Livepvrdata4cs.Net.Responses.StatusResponse">
            <summary>
            A successful event query request will result in a StatusResponse object being returned; these objects contain all of the details about the queried event
            </summary>
        </member>
        <member name="T:Livepvrdata4cs.Net.Responses.Response">
            <summary>
            All responses from the web service return a subclass of Response.  Use the <code>isError()</code> on these objects to determine if the response is an error or not.
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Net.Responses.Response.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isError">If this instance is representing an error response then this argument should be true, false otherwise</param>
        </member>
        <member name="M:Livepvrdata4cs.Net.Responses.Response.ToString">
            <summary>
            Dumps the state of the object to a string
            </summary>
            <returns>The state of the object, as a string</returns>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.Response.IsError">
            <summary>
            Denotes if this instance represents an error response; if this property is true then the instance can safely be cast to an ErrorResponse object.
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Net.Responses.StatusResponse.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="title">The title of the event</param>
            <param name="status">The status of the event as read from the monitor source; this is an arbitrary value and is not usually useful except for Live PVR Data development; provided as a courtesy only</param>
            <param name="isValid">Is this response valid?  In other words, was the query successful?  If this value if false then you CANNOT trust the other boolean properties in the object.</param>
            <param name="isActive">Is the event still active?</param>
            <param name="isComplete">Is the event complete?</param>
        </member>
        <member name="M:Livepvrdata4cs.Net.Responses.StatusResponse.#ctor">
            <summary>
            Constructor for JSON serialization; DO NOT USE!
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.StatusResponse.Title">
            <summary>
            The title of the event queried, normalized (i.e. "NFL Football", "MLB Baseball", etc.)
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.StatusResponse.Status">
            <summary>
            The status of the event as received from the monitor source.  This is an arbitrary string, but is processed by the server to determin the values of the other booleans in this object.  It is provided as a courtesy only and is mainly used for debugging purposes.
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.StatusResponse.IsValid">
            <summary>
            Are the results of this query valid?  If this value is False then the other boolean values should NOT be trusted/used
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.StatusResponse.IsActive">
            <summary>
            Is the event still in progress?
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.StatusResponse.IsComplete">
            <summary>
            Is the event complete?
            </summary>
        </member>
        <member name="T:Livepvrdata4cs.Net.Requests.OverrideRequest">
            <summary>
            Encapsulates an IMMUTABLE override map request.  Since these objects are immutable, using the default constructor is useless for all users.
            The default constructor only exists to support the JSON serialization used for web communication.  Unfortunately, the serializer requires
            the default constructor to be public.
            </summary>
        </member>
        <member name="T:Livepvrdata4cs.Net.Requests.Request">
            <summary>
            Request is the base abstract class for all web service requests.  The web service expects some subclass of Request as input for all requests.
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Net.Requests.Request.ToString">
            <summary>
            Returns a dump of the object as a string
            </summary>
            <returns>The current state of the object, as a string</returns>
        </member>
        <member name="M:Livepvrdata4cs.Net.Requests.OverrideRequest.#ctor">
            <summary>
            Default constructor, DO NOT USE!  Used by JSON serializer only!
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Net.Requests.OverrideRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="epgName">The name of the team as found in the EPG feed</param>
            <param name="feedName">The name of the team as found in the livepvrdata monitoring feed</param>
            <param name="email">A VALID email address where the web service will send the confirmation link to</param>
        </member>
        <member name="P:Livepvrdata4cs.Net.Requests.OverrideRequest.EpgName">
            <summary>
            The EPG name of the override entry (i.e. "Michigan State")
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Requests.OverrideRequest.FeedName">
            <summary>
            The monitor feed name of the entry; get this from events.jsp on the livepvrdata.com site
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Requests.OverrideRequest.Email">
            <summary>
            The VALID email address where livepvrdata will send the confirmation link to; only confirmed override submissions are committed to the data store
            </summary>
        </member>
        <member name="T:Livepvrdata4cs.Net.Requests.StatusRequest">
            <summary>
            An IMMUTABLE object that encapsulates an event status query.  Since these objects are immutable, the default constructor is useless to
            ALL users.  It is only provided for JSON serializaton of the object.
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Net.Requests.StatusRequest.#ctor(System.String,System.String,System.String[],System.Nullable{System.Int64})">
            <summary>
            Constructor
            </summary>
            <param name="type">The type of the event being monitored; this is simply the program title ("MLB Baseball", "NFL Football", etc.)</param>
            <param name="details">Details of the event to be monitored (i.e. "Miami Dolphins at Buffalo Bills"); when possible, specify the teams array instead; ignored if the teams array is non-null</param>
            <param name="teams">A two element array of teams involved in the event; they must be unique, non-null, non-empty strings; if the array is non-null then the details argument is ignored; when possible, use the array argument.</param>
            <param name="start">The start time of the event being monitored, as a Unix timestamp value; successive calls to query the same event should use the same start time over and over; do NOT use the current time on each call!</param>
        </member>
        <member name="M:Livepvrdata4cs.Net.Requests.StatusRequest.#ctor(System.String,System.String,System.String[],System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="type">The type of event; the program title</param>
            <param name="details">The episode details</param>
            <param name="teams">The two element array of teams; must be unique, non-null, non-empty strings; if this arg is not null then the details arg is ignored</param>
            <param name="start">The start time of the event; successive calls to query the same event should be using the same start time; do NOT pass the current time!</param>
        </member>
        <member name="M:Livepvrdata4cs.Net.Requests.StatusRequest.#ctor">
            <summary>
            Default constructor; DO NOT USE!  Required for JSON serialization.
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Requests.StatusRequest.Type">
            <summary>
            The type of event being monitored; this is the program title (i.e. "NFL Football", "MLB Baseball", etc.)
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Requests.StatusRequest.Details">
            <summary>
            A description of the event; used when you can't provide the teams array, but the teams array is preferred.
            
            The web service deals with the parsing and extraction of team info from this string, but it must be in a certain format.
            Zap2It episode strings are in the expected format so just pass the episode info along in this case.
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Requests.StatusRequest.Teams">
            <summary>
            An array of teams involved in the event; if provided it must be exactly two elements, both unique, non-null and non-empty strings; this is the preferred way to provide team info for an event to be queried
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Requests.StatusRequest.Start">
            <summary>
            The start time of the event being queried.  Successive calls to query the same event should use the same time over and over.  Do NOT
            simply pass the current time of day on each call to this method!
            </summary>
        </member>
        <member name="T:Livepvrdata4cs.Net.Responses.SimpleResponse">
            <summary>
            A valid response that returns nothing will simply return a SimpleResponse; these objects contain no data except that the IsError property will be false.
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Net.Responses.SimpleResponse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Livepvrdata4cs.Net.Responses.ErrorResponse">
            <summary>
            If a request to the web service generates an error then it will be encapsulated in an ErrorResponse object
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Net.Responses.ErrorResponse.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">The human friendly error message</param>
            <param name="stackTrace">If the error generated an exception on the server side then that exception is provided here and should be passed onto the Live PVR Data team for investigation should the exception be reproducible.</param>
        </member>
        <member name="M:Livepvrdata4cs.Net.Responses.ErrorResponse.#ctor">
            <summary>
            Do NOT use; provided for JSON serialization only
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.ErrorResponse.Message">
            <summary>
            The error message generated by the web service; this is a human readable error message
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Net.Responses.ErrorResponse.StackTrace">
            <summary>
            If the error produced on the server generated a server side exception then the stack trace will be provided here.  If you are
            constantly encountering an error that produces a stack trace then you should provide the stack trace to the Live PVR Data admins
            for problem determination.
            </summary>
        </member>
        <member name="T:Livepvrdata4cs.Client">
            <summary>
            Create instances of Client to connect to a Live PVR Data web service server.  Instances of this class are used to communicate with
            the web service to query for information about events or to request modifications to the override map.
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Client.#ctor(System.Uri,System.String)">
            <summary>
            Constructor; most users of this API SHOULD NOT use this constructor.  It's mainly used for testing and debugging against test versions of the web service.
            </summary>
            <param name="baseUri">The base URI of the web service to connect to.</param>
            <param name="userAgent">The custom user agent header to send on all requests; this should uniquely identify the application using this API.</param>
        </member>
        <member name="M:Livepvrdata4cs.Client.#ctor(System.Uri)">
            <summary>
            Constructor; most users of this API SHOULD NOT use this constructor.  It's made available for testing of the API.
            </summary>
            <param name="baseUri">The base URI of the web service to connect to.</param>
        </member>
        <member name="M:Livepvrdata4cs.Client.#ctor(System.String)">
            <summary>
            Constructor; this is the constructor that most users SHOULD use.  Allows setting of the User-Agent header sent with each request.
            </summary>
            <param name="userAgent">The unique app identifier of the program using this API (e.g. "MyApp/1.0.0")</param>
        </member>
        <member name="M:Livepvrdata4cs.Client.#ctor">
            <summary>
            Default constructor; connects to the production version of the web service using the default agent header; NOT recommended, please specifiy a unique agent header when using this API.
            </summary>
        </member>
        <member name="M:Livepvrdata4cs.Client.GetStatus(System.String,System.String[],System.DateTime)">
            <summary>
            Query the status of an event
            </summary>
            <param name="type">The type of event you're querying; this is usually the program title ("NFL Football", "MLB Baseball", etc.)</param>
            <param name="teams">An array of the teams in the event being queried; this array must contain EXACTLY two unique elements, neither of which can be null or the empty string</param>
            <param name="start">This is the start time of the event being monitored; usually you'll provide the start time of the recording; this value should never change while monitoring an event (i.e. do NOT simply provide the current time on each call)</param>
            <returns>On success, returns a StatusResponse object if the event is one that can be monitored by the web service or null if the event is not a monitored event.  If an error occured during the query then an ErrorResponse object is returned; use the <code>isError()</code> method to determine which type was received and then cast to the appropriate subclass.</returns>
            <exception cref="T:System.IO.IOException">Thrown if there is a fatal error when attempting to communicate with the web service (i.e. Internet connection is down, web service is down, firewall is blocking access to web service, etc.)</exception>
        </member>
        <member name="M:Livepvrdata4cs.Client.GetStatus(System.String,System.String,System.DateTime)">
            <summary>
            Query the status of an event
            </summary>
            <param name="type">The type of event you're querying; this is usually the program title ("NFL Football", "MLB Baseball", etc.)</param>
            <param name="desc">A description of the event (i.e. "Miami Dolphins at Buffalo Bills"); the web service will parse out the team info, but it has to follow the expected format.  Zap2It program descriptions follow the expected format so just pass those along.</param>
            <param name="start">This is the start time of the event being monitored; usually you'll provide the start time of the recording; this value should never change while monitoring an event (i.e. do NOT simply provide the current time on each call)</param>
            <returns>On success, returns a StatusResponse object if the event is one that can be monitored by the web service or null if the event is not a monitored event.  If an error occured during the query then an ErrorResponse object is returned; use the <code>isError()</code> method to determine which type was received and then cast to the appropriate subclass.</returns>
            <exception cref="T:System.IO.IOException">Thrown if there is a fatal error when attempting to communicate with the web service (i.e. Internet connection is down, web service is down, firewall is blocking access to web service, etc.)</exception>
        </member>
        <member name="M:Livepvrdata4cs.Client.GetStatus(Livepvrdata4cs.Net.Requests.StatusRequest)">
            <summary>
            Query the status of an event
            </summary>
            <param name="req">A StatusRequest object describing the event being queried</param>
            <returns>On success, returns a StatusResponse object if the event is one that can be monitored by the web service or null if the event is not a monitored event.  If an error occured during the query then an ErrorResponse object is returned; use the <code>isError()</code> method to determine which type was received and then cast to the appropriate subclass.</returns>
            <exception cref="T:System.IO.IOException">Thrown if there is a fatal error when attempting to communicate with the web service (i.e. Internet connection is down, web service is down, firewall is blocking access to web service, etc.)</exception>
        </member>
        <member name="M:Livepvrdata4cs.Client.SubmitOverrideRequest(System.String,System.String,System.String)">
            <summary>
            Submit an update to the web service override map.  When successful, an email is sent to the provided address, which contains a link that must be clicked on in order to commit the change to the online data store.
            </summary>
            <param name="epgName">The name of the team as seen in the EPG feed (i.e. "Oklahoma State")</param>
            <param name="feedName">The name of the team as seen at http://www.livepvrdata.com/events.jsp (i.e. "Oklahoma St")</param>
            <param name="email">A VALID email address; a confirmation link is sent to this address by the web service and the submission is not committed to the data store until the link in the email is clicked.</param>
            <returns>A SimpleResponse on success or an ErrorResponse on failure; cast the return value based on the <code>isError()</code> value of the returned object</returns>
            <exception cref="T:System.IO.IOException">Thrown if there is a fatal error when attempting to communicate with the web service (i.e. Internet connection is down, web service is down, firewall is blocking access to web service, etc.)</exception>
        </member>
        <member name="M:Livepvrdata4cs.Client.SubmitOverrideRequest(Livepvrdata4cs.Net.Requests.OverrideRequest)">
            <summary>
            Submit an update to the web service override map.  When successful, an email is sent to the provided address, which contains a link that must be clicked on in order to commit the change to the online data store.
            </summary>
            <param name="req">An OverrideRequest object describing the details of the override edit request to be submitted to the server.</param>
            <returns>A SimpleResponse on success or an ErrorResponse on failure; cast the return value based on the <code>isError()</code> value of the returned object</returns>
            <exception cref="T:System.IO.IOException">Thrown if there is a fatal error when attempting to communicate with the web service (i.e. Internet connection is down, web service is down, firewall is blocking access to web service, etc.)</exception>
        </member>
        <member name="M:Livepvrdata4cs.Client.GetWebClient">
            <summary>
            Return an instance of WebClient suitable for making the request to the web service.  The instance returned is configured with the proper user agent header, etc.
            </summary>
            <returns>The WebClient to be used for web requests</returns>
        </member>
        <member name="P:Livepvrdata4cs.Client.DefaultUri">
            <summary>
            The default URI instances of this class will connect to if not specified; always points to the latest production version of the web service.
            </summary>
        </member>
        <member name="P:Livepvrdata4cs.Client.DefaultUserAgent">
            <summary>
            The default user agent instances of this class will use if not specified; all consumers of this API are encouraged to NOT use this value!
            </summary>
        </member>
    </members>
</doc>
